I"I.<h1 id="问题描述">问题描述</h1>
<p>A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.<br />
For example, these are arithmetic sequences:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span>
<span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span>
<span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="o">-</span><span class="mi">9</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The following sequence is not arithmetic.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>A zero-indexed array A consisting of N numbers is given. A <strong>subsequence</strong> slice of that array is any sequence of integers (<code class="highlighter-rouge">P0, P1, ..., Pk</code>) such that <code class="highlighter-rouge">0 ≤ P0 &lt; P1 &lt; ... &lt; Pk &lt; N</code>.</p>

<p>A <strong>subsequence</strong> slice (<code class="highlighter-rouge">P0, P1, ..., Pk</code>) of array A is called arithmetic if the sequence <code class="highlighter-rouge">A[P0], A[P1], ..., A[Pk-1], A[Pk]</code> is arithmetic. In particular, this means that <code class="highlighter-rouge">k ≥ 2</code>.</p>

<p>The function should return the number of arithmetic subsequence slices in the array A.</p>

<p>The input contains N integers. Every integer is in the range of <code class="highlighter-rouge">-2^31</code> and <code class="highlighter-rouge">2^31-1</code> and <code class="highlighter-rouge">0 ≤ N ≤ 1000</code>. The output is guaranteed to be less than <code class="highlighter-rouge">2^31-1</code>.</p>

<h3 id="example-1">Example 1:</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>

<span class="n">Output</span><span class="o">:</span> <span class="mi">7</span>

<span class="n">Explanation</span><span class="o">:</span>
<span class="n">All</span> <span class="n">arithmetic</span> <span class="n">subsequence</span> <span class="n">slices</span> <span class="n">are</span><span class="o">:</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
<span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
<span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="解法">解法</h1>
<p>这种求最值的题目不是动态规划就是贪心，这题要求全局解所以采用动态规划解法。<br />
首先需要解决动态数组如何定义的问题，如果定义为dp[i]表示到i位置subsequences的个数，那么状态转移方程无法求解，因为当前位置的subsequence和前面所有位置的subsequence有关。需要第二位存储前面的序列信息。首先想到的是定义第二维为diff的长度，但diff可以达到2 * INT_MAX，消耗内存过多，需要采用哈希表存储各个位置的diff信息。所以现在的动态数组为vector&lt;int, unordered_map&lt;int, int»。<br />
首先想的是dp[i][diff]存储位置i差值为diff的序列长度，和<a href="https://hexinlin.top/2019/11/20/leetcode-413-Arithmetic-Slices/">leetcode-413</a>一样，但这题有许多重复数字，或者diff==0，难以code。这里采用dp[i][diff]表示到i位置diff的个数。<br />
对每个i位置，遍历前面的位置j从0到i-1, diff = A[i] - A[j], diff[i] += 1(这里很重要，之后解释), 如果dp[j].count(diff)存在表示j之前出现过这个diff，res += dp[j][diff], dp[i][diff] += dp[j][diff]。这里和<a href="https://hexinlin.top/2019/11/20/leetcode-413-Arithmetic-Slices/">leetcode-413</a>思想一样，只是不存长度改为diff个数，当前diff加进来，假设序列长度为interval, 新加subsequnce个数为interval-2，同时对应i位置diff有interval-1个，j位置diff有interval-2个，所以 res += dp[j][diff]和前面思想一模一样。<br />
再解释为啥dp[i][diff]要自增1，一是为了加diff[j][diff]，而第二点更重要的当有重复数字时dp[i][diff]自增在统计重复个数，举例子{2, 2, 3, 4},如果不是自增，就返回了1，正确为2.<br />
注意下面代码中先用long long存储差值，如果delta不在int表示范围内，则continue，为啥？因为题目限定每个数字在int范围内，如果delta不在int范围内，是没法组成大于等于3个的subsequences。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">numberOfArithmeticSlices</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">A</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">long</span> <span class="kt">long</span> <span class="n">delta</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">delta</span> <span class="o">&gt;</span> <span class="n">INT_MAX</span> <span class="o">||</span> <span class="n">delta</span> <span class="o">&lt;</span> <span class="n">INT_MIN</span><span class="p">)</span>
				<span class="k">continue</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">delta</span><span class="p">;</span>
			<span class="o">++</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">diff</span><span class="p">];</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">count</span><span class="p">(</span><span class="n">diff</span><span class="p">)){</span>
				<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">diff</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">diff</span><span class="p">]</span> <span class="p">;</span>
				<span class="n">res</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">diff</span><span class="p">];</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>time complexity: O(n^2)<br />
space complexity: O(n)<br />
runtime: 85.61%<br />
memory usage: 80.00%</p>

<h1 id="link">Link</h1>
<p><a href="https://leetcode.com/problems/arithmetic-slices-ii-subsequence/">leetcode-446</a> <br />
<a href="https://www.cnblogs.com/grandyang/p/6057934.html">solution </a><br />
<a href="https://leetcode.com/problems/arithmetic-slices-ii-subsequence/discuss/92822/Detailed-explanation-for-Java-O(n2)-solution">大神fun4LeetCode解释</a></p>
:ET