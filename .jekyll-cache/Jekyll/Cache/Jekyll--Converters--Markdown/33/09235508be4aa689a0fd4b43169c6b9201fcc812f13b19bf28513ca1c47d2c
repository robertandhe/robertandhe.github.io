I"A<h1 id="问题描述">问题描述</h1>
<p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node’s value. If it is a null node, we record using a sentinel value such as #.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>     <span class="n">_9_</span>
    <span class="o">/</span>   \
   <span class="mi">3</span>     <span class="mi">2</span>
  <span class="o">/</span> <span class="err">\</span>   <span class="o">/</span> \
 <span class="mi">4</span>   <span class="mi">1</span>  <span class="err">#</span>  <span class="mi">6</span>
<span class="o">/</span> <span class="err">\</span> <span class="o">/</span> <span class="err">\</span>   <span class="o">/</span> \
<span class="err">#</span> <span class="err">#</span> <span class="err">#</span> <span class="err">#</span>   <span class="err">#</span> <span class="err">#</span>  
</pre></td></tr></tbody></table></code></pre></div></div>
<p>For example, the above binary tree can be serialized to the string “9,3,4,#,#,1,#,#,2,#,6,#,#”, where # represents a null node.<br />
Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.
Each comma separated value in the string must be either an integer or a character ‘#’ representing null pointer.
You may assume that the input format is always valid, for example it could never contain two consecutive commas such as “1,,3”.
Example 1:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="s">"9,3,4,#,#,1,#,#,2,#,6,#,#"</span>
<span class="n">Output</span><span class="o">:</span> <span class="nb">true</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Example 2:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="s">"1,#"</span>
<span class="n">Output</span><span class="o">:</span> <span class="nb">false</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Example 2:</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="s">"9,#,#,1"</span>
<span class="n">Output</span><span class="o">:</span> <span class="nb">false</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="思路给定一个字符串判断是否为二叉树先序遍历序列化字符串">思路：给定一个字符串，判断是否为二叉树先序遍历序列化字符串。</h1>
<p>要点：</p>
<ol>
  <li>先序遍历序列化为满二叉树，叶结点个数比内部结点个数多一个，即”#”比数字多一个；</li>
  <li>末尾字符一定为”#”。</li>
</ol>

<h1 id="解法1">解法1：</h1>
<p>需要把每个字符以逗号’,’为间隔读入，先解码，利用getline函数。解码完利用cnt记录”#”出现次数，遇”#”,cnt加1，否则减1。
如果运行中cnt &lt; 0,说明非法，返回false。运行结束cnt应该等于0且末尾字符为”#”。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">isValidSerialization</span><span class="p">(</span><span class="n">string</span> <span class="n">preorder</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="n">istringstream</span> <span class="n">in</span><span class="p">(</span><span class="n">preorder</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="sc">','</span><span class="p">))</span>
      <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">vec</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">"#"</span><span class="p">){</span>
        <span class="o">--</span><span class="n">cnt</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
          <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="o">++</span><span class="n">cnt</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">cnt</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">vec</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">==</span> <span class="s">"#"</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="扩展getline函数两种形式">扩展：getline函数两种形式</h2>
<p>在C++中本质上有两种getline函数，一种在头文件<istream>中，是istream类的成员函数。一种在头文件<string>中，是普通函数。</string></istream></p>
<ol>
  <li>在<istream>中的getline()函数有两种重载形式：
</istream>    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">istream</span><span class="o">&amp;</span> <span class="n">getline</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="n">streamsize</span> <span class="n">n</span> <span class="p">);</span>
<span class="n">istream</span><span class="o">&amp;</span> <span class="n">getline</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="n">streamsize</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">delim</span> <span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>作用是： 从istream中读取至多n个字符(包含结束标记符)保存在s对应的数组中。即使还没读够n个字符，
如果遇到delim或 字数达到限制，则读取终止，delim都不会被保存进s对应的数组中。</p>
  </li>
  <li>在<string>中的getline函数有四种重载形式：
</string>    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="n">istream</span><span class="o">&amp;</span> <span class="n">getline</span> <span class="p">(</span><span class="n">istream</span><span class="o">&amp;</span>  <span class="n">is</span><span class="p">,</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">,</span> <span class="kt">char</span> <span class="n">delim</span><span class="p">);</span>
<span class="n">istream</span><span class="o">&amp;</span> <span class="n">getline</span> <span class="p">(</span><span class="n">istream</span><span class="o">&amp;&amp;</span> <span class="n">is</span><span class="p">,</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">,</span> <span class="kt">char</span> <span class="n">delim</span><span class="p">);</span>
<span class="n">istream</span><span class="o">&amp;</span> <span class="n">getline</span> <span class="p">(</span><span class="n">istream</span><span class="o">&amp;</span>  <span class="n">is</span><span class="p">,</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">);</span>
<span class="n">istream</span><span class="o">&amp;</span> <span class="n">getline</span> <span class="p">(</span><span class="n">istream</span><span class="o">&amp;&amp;</span> <span class="n">is</span><span class="p">,</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>用法和上第一种类似，但是读取的istream是作为参数is传进函数的。读取的字符串保存在string类型的str中。<br />
is    ：表示一个输入流，例如cin。
str   ：string类型的引用，用来存储输入流中的流信息。
delim ：char类型的变量，所设置的截断字符；在不自定义设置的情况下，遇到’\n’，则终止输入。</p>
  </li>
</ol>

<h1 id="解法2">解法2：</h1>
<p>边解码边判断，degree初始化为，表示容忍的多”#”的个数。运行过程中degree为0，表示按道理应该表示正常二叉树的结束。如果后面再次出现非”#”字符，则为false。运行完判断degree是否为0。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kt">bool</span> <span class="nf">isValidSerialization2</span><span class="p">(</span><span class="n">string</span> <span class="n">preorder</span><span class="p">)</span> 
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">degree</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">degree_is_zero</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">istringstream</span> <span class="n">in</span><span class="p">(</span><span class="n">preorder</span><span class="p">);</span>
	<span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="sc">','</span><span class="p">)){</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="s">"#"</span><span class="p">){</span>
			<span class="o">--</span><span class="n">degree</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">degree</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
				<span class="n">degree_is_zero</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="o">++</span><span class="n">degree</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">degree_is_zero</span><span class="p">)</span>
				<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">degree</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="解法2-1">解法2：</h1>
<p>不解码，某位加’,’，判断所有字符。初始容忍capacity为1，不是’,’,continue。否则capacity减1,如果capacity&lt; 0,返回false。
再判断’,’前是否为”#”，为”#”则继续，不为”#”表示前为数字，capacity加2，其中加1补回前面减小的，多个一个1表示容忍度加1。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kt">bool</span> <span class="nf">isValidSerialization2</span><span class="p">(</span><span class="n">string</span> <span class="n">preorder</span><span class="p">)</span> 
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">degree</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">degree_is_zero</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">istringstream</span> <span class="n">in</span><span class="p">(</span><span class="n">preorder</span><span class="p">);</span>
	<span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="sc">','</span><span class="p">)){</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="s">"#"</span><span class="p">){</span>
			<span class="o">--</span><span class="n">degree</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">degree</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
				<span class="n">degree_is_zero</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="o">++</span><span class="n">degree</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">degree_is_zero</span><span class="p">)</span>
				<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">degree</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET