I"޴<blockquote>
  <p>写在前面，这是第二次参加leetcode weekly contest，这次终于把题目做完了，全球排名548/5820，还有提升空间。</p>
</blockquote>

<h1 id="第一题5271-minimum-time-visiting-all-pointseasy">第一题：5271. Minimum Time Visiting All Points(Easy)</h1>
<h2 id="题目描述">题目描述</h2>
<p>On a plane there are <code class="highlighter-rouge">n</code> points with integer coordinates <code class="highlighter-rouge">points[i] = [xi, yi]</code>. Your task is to find the minimum time in seconds to visit all points.
You can move according to the next rules:</p>
<ul>
  <li>In one second always you can either move vertically, horizontally by one unit or diagonally (it means to move one unit vertically and one unit horizontally in one second).</li>
  <li>You have to visit the points in the same order as they appear in the array.</li>
</ul>

<h4 id="example-1">Example 1:</h4>
<p><img src="https://raw.githubusercontent.com/robertandhe/MarkDownPhotos/master/2019-11-24/leetcode5271.PNG" alt="leetcode5271-example1" height="50%" width="50%" /></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">points</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">7</span>
<span class="n">Explanation</span><span class="o">:</span> <span class="n">One</span> <span class="n">optimal</span> <span class="n">path</span> <span class="n">is</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>   
<span class="n">Time</span> <span class="n">from</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="n">to</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span> <span class="n">seconds</span> 
<span class="n">Time</span> <span class="n">from</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span> <span class="n">to</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span> <span class="n">seconds</span>
<span class="n">Total</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">7</span> <span class="n">seconds</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-2">Example 2:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">points</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">]]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">5</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="constraints">Constraints:</h4>
<ul>
  <li><code class="highlighter-rouge">points.length == n</code></li>
  <li><code class="highlighter-rouge">1 &lt;= n &lt;= 100</code></li>
  <li><code class="highlighter-rouge">points[i].length == 2</code></li>
  <li><code class="highlighter-rouge">-1000 &lt;= points[i][0], points[i][1] &lt;= 1000</code></li>
</ul>

<h2 id="解法">解法</h2>
<p> 这题给出一系列点，要求出把它们连起来需要的最小移动步数，可以向上下左右移动一个单位或者沿对角线移动一个单位。
 那么我们肯定是优先沿对角线移动，因为沿对角线移动在同时减小x方向和y方向的差距，当没法沿对角线移动时再考虑沿着
垂直或者水平方向移动，至于到底是沿垂直还是水平就要看那个方向差距大而无法通过对角线移动弥补。<br />
 这题限定要沿着给出的点一个个连起来，如果没有这个条件难度陡然上升。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">minTimeToVisitAllPoints</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">points</span><span class="p">)</span> 
<span class="p">{</span>
   <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">points</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>     
   <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
   <span class="p">{</span>
	   <span class="kt">int</span> <span class="n">deltaX</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
	   <span class="kt">int</span> <span class="n">deltaY</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
	   <span class="kt">int</span> <span class="n">delta</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">deltaX</span><span class="p">,</span> <span class="n">deltaY</span><span class="p">);</span>
	   <span class="n">res</span> <span class="o">+=</span> <span class="n">delta</span><span class="p">;</span>
	   <span class="k">if</span> <span class="p">(</span><span class="n">deltaX</span> <span class="o">&lt;</span> <span class="n">deltaY</span><span class="p">){</span>
		   <span class="n">res</span> <span class="o">+=</span> <span class="n">deltaY</span> <span class="o">-</span> <span class="n">delta</span><span class="p">;</span>
	   <span class="p">}</span>
	   <span class="k">else</span> 
	   	<span class="n">res</span> <span class="o">+=</span> <span class="n">deltaX</span> <span class="o">-</span> <span class="n">delta</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="第二题5272-count-servers-that-communicatemedium">第二题：5272. Count Servers that Communicate(Medium)</h1>
<h2 id="题目描述-1">题目描述：</h2>
<p>You are given a map of a server center, represented as a <code class="highlighter-rouge">m * n</code> integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.</p>

<p>Return the number of servers that communicate with any other server.</p>
<h4 id="example-1-1">Example 1：</h4>
<p><img src="https://raw.githubusercontent.com/robertandhe/MarkDownPhotos/master/2019-11-24/leetcode5272-1.PNG" alt="leetcode5272-example1" /></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">grid</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">0</span>
<span class="n">Explanation</span><span class="o">:</span> <span class="n">No</span> <span class="n">servers</span> <span class="n">can</span> <span class="n">communicate</span> <span class="n">with</span> <span class="n">others</span><span class="p">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-2-1">Example 2：</h4>
<p><img src="https://raw.githubusercontent.com/robertandhe/MarkDownPhotos/master/2019-11-24/leetcode5272-2.PNG" alt="leetcode5272-example2" /></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">grid</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">3</span>
<span class="n">Explanation</span><span class="o">:</span> <span class="n">All</span> <span class="n">three</span> <span class="n">servers</span> <span class="n">can</span> <span class="n">communicate</span> <span class="n">with</span> <span class="n">at</span> <span class="n">least</span> <span class="n">one</span> <span class="n">other</span> <span class="n">server</span><span class="p">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-3">Example 3：</h4>
<p><img src="https://raw.githubusercontent.com/robertandhe/MarkDownPhotos/master/2019-11-24/leetcode5272-3.PNG" alt="leetcode5272-example3" height="70%" width="70%" /></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">grid</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">4</span>
<span class="n">Explanation</span><span class="o">:</span> <span class="n">The</span> <span class="n">two</span> <span class="n">servers</span> <span class="n">in</span> <span class="n">the</span> <span class="n">first</span> <span class="n">row</span> <span class="n">can</span> <span class="n">communicate</span> <span class="n">with</span> <span class="n">each</span> <span class="n">other</span><span class="p">.</span> <span class="n">The</span> <span class="n">two</span> <span class="n">servers</span> <span class="n">in</span> <span class="n">the</span> <span class="n">third</span> <span class="n">column</span> <span class="n">can</span> <span class="n">communicate</span> <span class="n">with</span> <span class="n">each</span> <span class="n">other</span><span class="p">.</span> <span class="n">The</span> <span class="n">server</span> <span class="n">at</span> <span class="n">right</span> <span class="n">bottom</span> <span class="n">corner</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">communicate</span> <span class="n">with</span> <span class="n">any</span> <span class="n">other</span> <span class="n">server</span><span class="p">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="constraints-1">Constraints:</h4>
<ul>
  <li><code class="highlighter-rouge">m == grid.length</code></li>
  <li><code class="highlighter-rouge">n == grid[i].length</code></li>
  <li><code class="highlighter-rouge">1 &lt;= m &lt;= 250</code></li>
  <li><code class="highlighter-rouge">1 &lt;= n &lt;= 250</code></li>
  <li><code class="highlighter-rouge">grid[i][j] == 0 or 1</code></li>
</ul>

<h2 id="解法-1">解法</h2>
<p> 这题给出一个网络grid，网络中每个节点为1是代表那个位置有服务器，为0则没有，同一行或者同一列中有服务器时表示这个服务器和别的服务器相连，要求出网络中和别的服务器相连的服务器数量。这里直接遍历，对相应位置为1时则可以统计那行那列有没有服务器，为0则继续。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">countServers</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">grid</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="n">grid</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">n</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
				<span class="k">continue</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">r</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
					<span class="k">continue</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
					<span class="o">++</span><span class="n">res</span><span class="p">;</span>
					<span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">flag</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">c</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span>
					<span class="k">continue</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
					<span class="o">++</span><span class="n">res</span><span class="p">;</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="第三题1268-search-suggestions-system">第三题：1268. Search Suggestions System</h1>
<h2 id="问题描述">问题描述</h2>
<p>Given an array of strings <code class="highlighter-rouge">products</code> and a string <code class="highlighter-rouge">searchWord</code>. We want to design a system that suggests at most three product names from <code class="highlighter-rouge">products</code> after each character of <code class="highlighter-rouge">searchWord</code> is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.</p>

<p>Return list of lists of the suggested <code class="highlighter-rouge">products</code> after each character of <code class="highlighter-rouge">searchWord</code> is typed.</p>

<h4 id="example-1-2">Example 1:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">products</span> <span class="o">=</span> <span class="p">[</span><span class="s">"mobile"</span><span class="p">,</span><span class="s">"mouse"</span><span class="p">,</span><span class="s">"moneypot"</span><span class="p">,</span><span class="s">"monitor"</span><span class="p">,</span><span class="s">"mousepad"</span><span class="p">],</span> <span class="n">searchWord</span> <span class="o">=</span> <span class="s">"mouse"</span>
<span class="n">Output</span><span class="o">:</span> <span class="p">[</span>
<span class="p">[</span><span class="s">"mobile"</span><span class="p">,</span><span class="s">"moneypot"</span><span class="p">,</span><span class="s">"monitor"</span><span class="p">],</span>
<span class="p">[</span><span class="s">"mobile"</span><span class="p">,</span><span class="s">"moneypot"</span><span class="p">,</span><span class="s">"monitor"</span><span class="p">],</span>
<span class="p">[</span><span class="s">"mouse"</span><span class="p">,</span><span class="s">"mousepad"</span><span class="p">],</span>
<span class="p">[</span><span class="s">"mouse"</span><span class="p">,</span><span class="s">"mousepad"</span><span class="p">],</span>
<span class="p">[</span><span class="s">"mouse"</span><span class="p">,</span><span class="s">"mousepad"</span><span class="p">]</span>
<span class="p">]</span>
<span class="n">Explanation</span><span class="o">:</span> <span class="n">products</span> <span class="n">sorted</span> <span class="n">lexicographically</span> <span class="o">=</span> <span class="p">[</span><span class="s">"mobile"</span><span class="p">,</span><span class="s">"moneypot"</span><span class="p">,</span><span class="s">"monitor"</span><span class="p">,</span><span class="s">"mouse"</span><span class="p">,</span><span class="s">"mousepad"</span><span class="p">]</span>
<span class="n">After</span> <span class="n">typing</span> <span class="n">m</span> <span class="n">and</span> <span class="n">mo</span> <span class="n">all</span> <span class="n">products</span> <span class="n">match</span> <span class="n">and</span> <span class="n">we</span> <span class="n">show</span> <span class="n">user</span> <span class="p">[</span><span class="s">"mobile"</span><span class="p">,</span><span class="s">"moneypot"</span><span class="p">,</span><span class="s">"monitor"</span><span class="p">]</span>
<span class="n">After</span> <span class="n">typing</span> <span class="n">mou</span><span class="p">,</span> <span class="n">mous</span> <span class="n">and</span> <span class="n">mouse</span> <span class="n">the</span> <span class="n">system</span> <span class="n">suggests</span> <span class="p">[</span><span class="s">"mouse"</span><span class="p">,</span><span class="s">"mousepad"</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-2-2">Example 2:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">products</span> <span class="o">=</span> <span class="p">[</span><span class="s">"havana"</span><span class="p">],</span> <span class="n">searchWord</span> <span class="o">=</span> <span class="s">"havana"</span>
<span class="n">Output</span><span class="o">:</span> <span class="p">[[</span><span class="s">"havana"</span><span class="p">],[</span><span class="s">"havana"</span><span class="p">],[</span><span class="s">"havana"</span><span class="p">],[</span><span class="s">"havana"</span><span class="p">],[</span><span class="s">"havana"</span><span class="p">],[</span><span class="s">"havana"</span><span class="p">]]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-3-1">Example 3:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">products</span> <span class="o">=</span> <span class="p">[</span><span class="s">"bags"</span><span class="p">,</span><span class="s">"baggage"</span><span class="p">,</span><span class="s">"banner"</span><span class="p">,</span><span class="s">"box"</span><span class="p">,</span><span class="s">"cloths"</span><span class="p">],</span> <span class="n">searchWord</span> <span class="o">=</span> <span class="s">"bags"</span>
<span class="n">Output</span><span class="o">:</span> <span class="p">[[</span><span class="s">"baggage"</span><span class="p">,</span><span class="s">"bags"</span><span class="p">,</span><span class="s">"banner"</span><span class="p">],[</span><span class="s">"baggage"</span><span class="p">,</span><span class="s">"bags"</span><span class="p">,</span><span class="s">"banner"</span><span class="p">],[</span><span class="s">"baggage"</span><span class="p">,</span><span class="s">"bags"</span><span class="p">],[</span><span class="s">"bags"</span><span class="p">]]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-4">Example 4:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">products</span> <span class="o">=</span> <span class="p">[</span><span class="s">"havana"</span><span class="p">],</span> <span class="n">searchWord</span> <span class="o">=</span> <span class="s">"tatiana"</span>
<span class="n">Output</span><span class="o">:</span> <span class="p">[[],[],[],[],[],[],[]]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="constraints-2">Constraints:</h4>
<ul>
  <li><code class="highlighter-rouge">1 &lt;= products.length &lt;= 1000</code></li>
  <li><code class="highlighter-rouge">1 &lt;= Σ products[i].length &lt;= 2 * 10^4</code></li>
  <li>All characters of <code class="highlighter-rouge">products[i]</code> are lower-case English letters.</li>
  <li><code class="highlighter-rouge">1 &lt;= searchWord.length &lt;= 1000</code></li>
  <li>All characters of <code class="highlighter-rouge">searchWord</code>are lower-case English letters.</li>
</ul>

<h2 id="解法-2">解法</h2>
<p> 题目要求对输入的检索词，给出搜索推荐。每输入一个字符给出至多3个推荐检索词，要求它们的前缀和现在已经输入的检索词相同，当有多余3个词前缀和已经输入词相同时，给出字典序前3个。<br />
 那么首先就肯定要用sort给字符串排序了，先建立空字符串str，每输入一个字符都加入字符串str,然后遍历products，找到前缀和str相同的字符串，多余3个时取前3个，这里用cnt统计已经找到的个数。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&gt;</span> <span class="n">suggestedProducts</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">products</span><span class="p">,</span> <span class="n">string</span> <span class="n">searchWord</span><span class="p">)</span> 
<span class="p">{</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&gt;</span> <span class="n">res</span><span class="p">;</span>
	<span class="n">sort</span><span class="p">(</span><span class="n">products</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">products</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
	<span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">char</span><span class="o">&amp;</span> <span class="n">c</span> <span class="o">:</span> <span class="n">searchWord</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">t</span><span class="p">;</span>
		<span class="n">str</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
		<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">products</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">cnt</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">string</span> <span class="n">product</span> <span class="o">=</span> <span class="n">products</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">product</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="o">==</span> <span class="n">str</span> <span class="o">&amp;&amp;</span> <span class="n">cnt</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">){</span>
				<span class="n">t</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">product</span><span class="p">);</span>
				<span class="o">++</span><span class="n">cnt</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="n">res</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="第四题1269-number-of-ways-to-stay-in-the-same-place-after-some-steps">第四题：1269. Number of Ways to Stay in the Same Place After Some Steps</h1>
<h2 id="题目描述-2">题目描述：</h2>
<p>You have a pointer at index <code class="highlighter-rouge">0</code> in an array of size <code class="highlighter-rouge">arrLen</code>. At each step, you can move 1 position to the left, 1 position to the right in the array or stay in the same place  (The pointer should not be placed outside the array at any time).</p>

<p>Given two integers <code class="highlighter-rouge">steps</code> and <code class="highlighter-rouge">arrLen</code>, return the number of ways such that your pointer still at index <code class="highlighter-rouge">0</code> after exactly <code class="highlighter-rouge">steps</code> steps.</p>

<p>Since the answer may be too large, return it modulo <code class="highlighter-rouge">10^9 + 7</code>.</p>
<h4 id="example-1-3">Example 1:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">steps</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">arrLen</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">4</span>
<span class="n">Explanation</span><span class="o">:</span> <span class="n">There</span> <span class="n">are</span> <span class="mi">4</span> <span class="n">differents</span> <span class="n">ways</span> <span class="n">to</span> <span class="n">stay</span> <span class="n">at</span> <span class="n">index</span> <span class="mi">0</span> <span class="n">after</span> <span class="mi">3</span> <span class="n">steps</span><span class="p">.</span>
<span class="n">Right</span><span class="p">,</span> <span class="n">Left</span><span class="p">,</span> <span class="n">Stay</span>
<span class="n">Stay</span><span class="p">,</span> <span class="n">Right</span><span class="p">,</span> <span class="n">Left</span>
<span class="n">Right</span><span class="p">,</span> <span class="n">Stay</span><span class="p">,</span> <span class="n">Left</span>
<span class="n">Stay</span><span class="p">,</span> <span class="n">Stay</span><span class="p">,</span> <span class="n">Stay</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-2-3">Example 2:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">steps</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">arrLen</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">2</span>
<span class="n">Explanation</span><span class="o">:</span> <span class="n">There</span> <span class="n">are</span> <span class="mi">2</span> <span class="n">differents</span> <span class="n">ways</span> <span class="n">to</span> <span class="n">stay</span> <span class="n">at</span> <span class="n">index</span> <span class="mi">0</span> <span class="n">after</span> <span class="mi">2</span> <span class="n">steps</span>
<span class="n">Right</span><span class="p">,</span> <span class="n">Left</span>
<span class="n">Stay</span><span class="p">,</span> <span class="n">Stay</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-3-2">Example 3:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="n">steps</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">arrLen</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">8</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="constraints-3">Constraints:</h4>
<ul>
  <li><code class="highlighter-rouge">1 &lt;= steps &lt;= 500</code></li>
  <li><code class="highlighter-rouge">1 &lt;= arrLen &lt;= 10^6</code></li>
</ul>

<h2 id="解法-3">解法</h2>
<p> 开始位于<code class="highlighter-rouge">0</code>位置，有长度为<code class="highlighter-rouge">arrLen</code>的数组，可以走<code class="highlighter-rouge">steps</code>步，每一步可以选择向左走单位，或者向右走一单位或者待在原地，要求出走<code class="highlighter-rouge">steps</code>步后最终位于0位置的走法数量。<br />
 这题一看就是递归了，因为每走一步只是减少了剩余的步数还有所处位置，子问题性质和原问题一模一样。假设当前还剩steps步，位于pos位置，如果选择向右走，就还剩steps-1步，当前位置到了pos+1；如果选择向左走，就还剩steps-1步，当前位置到了pos-1；如果选择待在原地，就还剩steps-1步，当前位置还是pos。<br />
 递归过程终止条件就是如果超出界限，即pos &lt; 0 或者 pos &gt;= arrLen， 则返回0；如果剩余步数steps &lt; 0,也要返回0；如果steps=0并且pos=0,即走完了所有步数并且位于0位置，则符合条件返回1。<br />
 为了减少重复计算，应该使用记忆数组记忆中间状态，即到某些相同位置时剩余可能也一样，那么应该直接返回值，避免重复计算。既要存储剩余步数，又要存储当前位置，记忆数组肯定是二维啦。注意这里记忆数组应该初始化为-1，不能初始化为0，因为可能某些位置不存在能够在剩余步数走回原点的走法。<br />
 还有一些边界情况，arrLen很大，严重大于steps，动态数组会超过内存限制，这时直接把arrLen截断为steps+1即可，因为最多能连续往右走，steps步数内最多走到steps+1位置。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">helper</span><span class="p">(</span><span class="kt">int</span> <span class="n">steps</span><span class="p">,</span> <span class="kt">int</span> <span class="n">arrLen</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">map</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">pos</span> <span class="o">&gt;=</span> <span class="n">arrLen</span> <span class="o">||</span> <span class="n">steps</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">steps</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pos</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
		<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">steps</span><span class="p">][</span><span class="n">pos</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">map</span><span class="p">[</span><span class="n">steps</span><span class="p">][</span><span class="n">pos</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">res</span> <span class="o">+=</span> <span class="n">helper</span><span class="p">(</span><span class="n">steps</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">arrLen</span><span class="p">,</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
	<span class="n">res</span> <span class="o">%=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="mf">1e9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">);</span>
	<span class="n">res</span> <span class="o">+=</span> <span class="n">helper</span><span class="p">(</span><span class="n">steps</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">arrLen</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
	<span class="n">res</span> <span class="o">%=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="mf">1e9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">);</span>
	<span class="n">res</span> <span class="o">+=</span> <span class="n">helper</span><span class="p">(</span><span class="n">steps</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">arrLen</span><span class="p">,</span> <span class="n">pos</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
	<span class="n">res</span> <span class="o">%=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="mf">1e9</span> <span class="o">+</span> <span class="mi">7</span><span class="p">);</span>
	<span class="n">map</span><span class="p">[</span><span class="n">steps</span><span class="p">][</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">numWays</span><span class="p">(</span><span class="kt">int</span> <span class="n">steps</span><span class="p">,</span> <span class="kt">int</span> <span class="n">arrLen</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">arrLen</span> <span class="o">&gt;</span> <span class="n">steps</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
		<span class="n">arrLen</span> <span class="o">=</span> <span class="n">steps</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">map</span><span class="p">(</span><span class="n">steps</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">arrLen</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
	<span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">steps</span><span class="p">,</span> <span class="n">arrLen</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="link">Link</h1>
<p><a href="https://leetcode.com/contest/weekly-contest-164/problems/minimum-time-visiting-all-points/">1266. Minimum Time Visiting All Points</a><br />
<a href="https://leetcode.com/contest/weekly-contest-164/problems/count-servers-that-communicate/">1267. Count Servers that Communicate</a><br />
<a href="https://leetcode.com/contest/weekly-contest-164/problems/search-suggestions-system/">1268. Search Suggestions System</a><br />
<a href="https://leetcode.com/contest/weekly-contest-164/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/">1269. Number of Ways to Stay in the Same Place After Some Steps</a></p>
:ET