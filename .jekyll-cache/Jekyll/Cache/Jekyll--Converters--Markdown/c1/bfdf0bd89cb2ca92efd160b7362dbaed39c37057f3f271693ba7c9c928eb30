I"#e<h2 id="问题描述">问题描述</h2>
<p>You are given an integer array <code class="highlighter-rouge">A</code>.  From some starting index, you can make a series of jumps.  The (1st, 3rd, 5th, …) jumps in the series are called <em>odd numbered jumps</em>, and the (2nd, 4th, 6th, …) jumps in the series are called <em>even numbered jumps</em>.</p>

<p>You may from index <code class="highlighter-rouge">i</code> jump forward to index <code class="highlighter-rouge">j</code> (with <code class="highlighter-rouge">i &lt; j</code>) in the following way:</p>
<ul>
  <li>During odd numbered jumps (ie. jumps 1, 3, 5, …), you jump to the index j such that <code class="highlighter-rouge">A[i] &lt;= A[j]</code> and <code class="highlighter-rouge">A[j]</code> is the smallest possible value.  If there are multiple such indexes j, you can only jump to the <strong>smallest</strong> such index <code class="highlighter-rouge">j</code>.</li>
  <li>During even numbered jumps (ie. jumps 2, 4, 6, …), you jump to the index <code class="highlighter-rouge">j</code> such that <code class="highlighter-rouge">A[i] &gt;= A[j]</code> and <code class="highlighter-rouge">A[j]</code> is the largest possible value.  If there are multiple such indexes j, you can only jump to the <strong>smallest</strong> such index <code class="highlighter-rouge">j</code>.</li>
  <li>(It may be the case that for some index <code class="highlighter-rouge">i</code>, there are no legal jumps.)</li>
</ul>

<p>A starting index is good if, starting from that index, you can reach the end of the array (index <code class="highlighter-rouge">A.length - 1</code>) by jumping some number of times (possibly 0 or more than once.)</p>

<p>Return the number of good starting indexes.</p>

<h4 id="example-1">Example 1:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">2</span>
<span class="n">Explanation</span><span class="o">:</span> 
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">we</span> <span class="n">can</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">(</span><span class="n">since</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">is</span> <span class="n">the</span> <span class="n">smallest</span> <span class="n">among</span> <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="n">that</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">or</span> <span class="n">equal</span> <span class="n">to</span> <span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">then</span> <span class="n">we</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">jump</span> <span class="n">any</span> <span class="n">more</span><span class="p">.</span>
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">and</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">we</span> <span class="n">can</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">then</span> <span class="n">we</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">jump</span> <span class="n">any</span> <span class="n">more</span><span class="p">.</span>
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">we</span> <span class="n">can</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span><span class="err">'</span><span class="n">ve</span> <span class="n">reached</span> <span class="n">the</span> <span class="n">end</span><span class="p">.</span>
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">we</span><span class="err">'</span><span class="n">ve</span> <span class="n">reached</span> <span class="n">the</span> <span class="n">end</span> <span class="n">already</span><span class="p">.</span>
<span class="n">In</span> <span class="n">total</span><span class="p">,</span> <span class="n">there</span> <span class="n">are</span> <span class="mi">2</span> <span class="n">different</span> <span class="n">starting</span> <span class="n">indexes</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span> <span class="n">where</span> <span class="n">we</span> <span class="n">can</span> <span class="n">reach</span> <span class="n">the</span> <span class="n">end</span> <span class="n">with</span> <span class="n">some</span> <span class="n">number</span> <span class="n">of</span> <span class="n">jumps</span><span class="p">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-2">Example 2:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">3</span>
<span class="n">Explanation</span><span class="o">:</span> 
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">we</span> <span class="n">make</span> <span class="n">jumps</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">:</span>

<span class="n">During</span> <span class="n">our</span> <span class="mx">1s</span><span class="n">t</span> <span class="n">jump</span> <span class="p">(</span><span class="n">odd</span> <span class="n">numbered</span><span class="p">),</span> <span class="n">we</span> <span class="n">first</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">because</span> <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="n">is</span> <span class="n">the</span> <span class="n">smallest</span> <span class="n">value</span> <span class="n">in</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="n">that</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="n">or</span> <span class="n">equal</span> <span class="n">to</span> <span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span>

<span class="n">During</span> <span class="n">our</span> <span class="mi">2</span><span class="n">nd</span> <span class="n">jump</span> <span class="p">(</span><span class="n">even</span> <span class="n">numbered</span><span class="p">),</span> <span class="n">we</span> <span class="n">jump</span> <span class="n">from</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span> <span class="n">because</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="n">is</span> <span class="n">the</span> <span class="n">largest</span> <span class="n">value</span> <span class="n">in</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="n">that</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="n">or</span> <span class="n">equal</span> <span class="n">to</span> <span class="n">A</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span>  <span class="n">A</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">is</span> <span class="n">also</span> <span class="n">the</span> <span class="n">largest</span> <span class="n">value</span><span class="p">,</span> <span class="n">but</span> <span class="mi">2</span> <span class="n">is</span> <span class="n">a</span> <span class="n">smaller</span> <span class="n">index</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">can</span> <span class="n">only</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span> <span class="n">and</span> <span class="n">not</span> <span class="n">i</span> <span class="o">=</span> <span class="mf">3.</span>

<span class="n">During</span> <span class="n">our</span> <span class="mi">3</span><span class="n">rd</span> <span class="n">jump</span> <span class="p">(</span><span class="n">odd</span> <span class="n">numbered</span><span class="p">),</span> <span class="n">we</span> <span class="n">jump</span> <span class="n">from</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span> <span class="n">because</span> <span class="n">A</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">is</span> <span class="n">the</span> <span class="n">smallest</span> <span class="n">value</span> <span class="n">in</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="n">that</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="n">or</span> <span class="n">equal</span> <span class="n">to</span> <span class="n">A</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span>

<span class="n">We</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">jump</span> <span class="n">from</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">so</span> <span class="n">the</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="n">is</span> <span class="n">not</span> <span class="n">good</span><span class="p">.</span>

<span class="n">In</span> <span class="n">a</span> <span class="n">similar</span> <span class="n">manner</span><span class="p">,</span> <span class="n">we</span> <span class="n">can</span> <span class="n">deduce</span> <span class="n">that</span><span class="o">:</span>
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">we</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">reach</span> <span class="n">the</span> <span class="n">end</span><span class="p">.</span>
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">we</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">and</span> <span class="n">then</span> <span class="n">we</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">jump</span> <span class="n">anymore</span><span class="p">.</span>
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">we</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">so</span> <span class="n">we</span> <span class="n">reach</span> <span class="n">the</span> <span class="n">end</span><span class="p">.</span>
<span class="n">From</span> <span class="n">starting</span> <span class="n">index</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">we</span> <span class="n">are</span> <span class="n">already</span> <span class="n">at</span> <span class="n">the</span> <span class="n">end</span><span class="p">.</span>
<span class="n">In</span> <span class="n">total</span><span class="p">,</span> <span class="n">there</span> <span class="n">are</span> <span class="mi">3</span> <span class="n">different</span> <span class="n">starting</span> <span class="n">indexes</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span> <span class="n">where</span> <span class="n">we</span> <span class="n">can</span> <span class="n">reach</span> <span class="n">the</span> <span class="n">end</span> <span class="n">with</span> <span class="n">some</span> <span class="n">number</span> <span class="n">of</span> <span class="n">jumps</span><span class="p">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="example-3">Example 3:</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">3</span>
<span class="n">Explanation</span><span class="o">:</span> 
<span class="n">We</span> <span class="n">can</span> <span class="n">reach</span> <span class="n">the</span> <span class="n">end</span> <span class="n">from</span> <span class="n">starting</span> <span class="n">indexes</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">and</span> <span class="mf">4.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="note">Note:</h4>
<ol>
  <li><code class="highlighter-rouge">1 &lt;= A.length &lt;= 20000</code></li>
  <li><code class="highlighter-rouge">0 &lt;= A[i] &lt; 100000</code></li>
</ol>

<h2 id="解法">解法</h2>
<p> 这道题给出一种跳跃方式，在奇数步跳跃时在当前数后面位置选中大于等于当前数的最小数当作目标位置，在偶数步是在当前数后面位置选中小于等于当前数的最大数当作目标位置，如果有多个位置满足要求，选取索引最小的位置，返回能跳到末尾的起跳点个数。<br />
 如果从前往后遍历无法知道后面那个位置符合要求，所以应该从后往前遍历。那么怎么知道那个位置符合要求，必须同时存储数值和位置，还要有序，就只有用有序图了，ordered_map&lt;int, int&gt;m 键为数值，值为位置。同时跳跃方式有跳低和跳高两种，所有要两个动态布尔数组来表示，higher[i]为true表示从i位置跳高能够到达末尾，lower[i]同理。<br />
 那么状态转移方程如何求。假设在当前位置时跳高，在后面位置选取大于等于它的位置，用m.lower_bound(A[i]）就能找到，用auto hi = m.lower_bound(A[i])表示下个位置，因为这步跳高了，下步必须跳低，能够到达末尾要看lower[hi-&gt;second]是否为true了。假设在当前位置跳低，在后面位置选取小于等于它的位置，注意这里用auto lo = m.upper_bound(A[i])，原因后面解释，因为这步跳低，下一步就是跳高，这个位置跳低能够到达末尾位置要看higher[(–lo)-&gt;second]。最后第一步必须跳高，以当前位置为起点能够到达末尾就要看higher[i]是否为true。<br />
 举例来说：
We need to jump higher and lower alternately to the end.</p>

<p>Take [5,1,3,4,2] as example.</p>

<p>If we start at 2,
we can jump either higher first or lower first to the end,
because we are already at the end.
higher(2) = true
lower(2) = true</p>

<p>If we start at 4,
we can’t jump higher, higher(4) = false
we can jump lower to 2, lower(4) = higher(2) = true</p>

<p>If we start at 3,
we can jump higher to 4, higher(3) = lower(4) = true
we can jump lower to 2, lower(3) = higher(2) = true</p>

<p>If we start at 1,
we can jump higher to 2, higher(1) = lower(2) = true
we can’t jump lower, lower(1) = false</p>

<p>If we start at 5,
we can’t jump higher, higher(5) = false
we can jump lower to 4, lower(5) = higher(4) = false</p>

<p> 再解释为啥auto lo = m.upper_bound(A[i])，以example 1为例，A=[10,13,12,14,15]。到倒数第二个14时，此时没有小于等于它的数，没法跳低，如果upper_bound知道begin，说明之前没有小于等于它的数，就没法跳了。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">oddEvenJumps</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">A</span><span class="p">)</span> 
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> 
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">higher</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">lower</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
	<span class="n">higher</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
	<span class="n">lower</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
	<span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">;</span>
	<span class="n">m</span><span class="p">[</span><span class="n">A</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">auto</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
		<span class="k">auto</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">upper_bound</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">hi</span> <span class="o">!=</span> <span class="n">m</span><span class="p">.</span><span class="n">end</span><span class="p">()){</span>
			<span class="n">higher</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">lower</span><span class="p">[</span><span class="n">hi</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">];</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">lo</span> <span class="o">!=</span> <span class="n">m</span><span class="p">.</span><span class="n">begin</span><span class="p">()){</span>
			<span class="n">lower</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">higher</span><span class="p">[(</span><span class="o">--</span><span class="n">lo</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">];</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">higher</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
			<span class="o">++</span><span class="n">res</span><span class="p">;</span>
		<span class="n">m</span><span class="p">[</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="link">Link</h2>
<p><a href="https://leetcode.com/problems/odd-even-jump/">leetcode-975</a><br />
<a href="https://leetcode.com/problems/odd-even-jump/discuss/217981/JavaC%2B%2BPython-DP-idea-Using-TreeMap-or-Stack">solution</a></p>
:ET