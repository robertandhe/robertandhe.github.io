I"ځ<h1 id="问题描述">问题描述</h1>
<p>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>

<p>Given a list of stones’ positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.</p>

<p>If the frog’s last jump was k units, then its next jump must be either <code class="highlighter-rouge">k - 1</code>, <code class="highlighter-rouge">k</code>, or <code class="highlighter-rouge">k + 1</code> units. Note that the frog can only jump in the forward direction.</p>

<h3 id="note">Note:</h3>
<ul>
  <li>The number of stones is <code class="highlighter-rouge">≥ 2</code> and is <code class="highlighter-rouge">&lt; 1,100</code>.</li>
  <li>Each stone’s position will be a non-negative integer <code class="highlighter-rouge">&lt; 2^31</code>.</li>
  <li>The <code class="highlighter-rouge">first stone</code>’s position is always <code class="highlighter-rouge">0</code>.</li>
</ul>

<h3 id="example-1">Example 1:</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">17</span><span class="p">]</span>

<span class="n">There</span> <span class="n">are</span> <span class="n">a</span> <span class="n">total</span> <span class="n">of</span> <span class="mi">8</span> <span class="n">stones</span><span class="p">.</span>
<span class="n">The</span> <span class="n">first</span> <span class="n">stone</span> <span class="n">at</span> <span class="n">the</span> <span class="mi">0</span><span class="n">th</span> <span class="n">unit</span><span class="p">,</span> <span class="n">second</span> <span class="n">stone</span> <span class="n">at</span> <span class="n">the</span> <span class="mx">1s</span><span class="n">t</span> <span class="n">unit</span><span class="p">,</span>
<span class="n">third</span> <span class="n">stone</span> <span class="n">at</span> <span class="n">the</span> <span class="mi">3</span><span class="n">rd</span> <span class="n">unit</span><span class="p">,</span> <span class="n">and</span> <span class="n">so</span> <span class="n">on</span><span class="p">...</span>
<span class="n">The</span> <span class="n">last</span> <span class="n">stone</span> <span class="n">at</span> <span class="n">the</span> <span class="mi">17</span><span class="n">th</span> <span class="n">unit</span><span class="p">.</span>

<span class="n">Return</span> <span class="nb">true</span><span class="p">.</span> <span class="n">The</span> <span class="n">frog</span> <span class="n">can</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">the</span> <span class="n">last</span> <span class="n">stone</span> <span class="n">by</span> <span class="n">jumping</span> 
<span class="mi">1</span> <span class="n">unit</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">2</span><span class="n">nd</span> <span class="n">stone</span><span class="p">,</span> <span class="n">then</span> <span class="mi">2</span> <span class="n">units</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">3</span><span class="n">rd</span> <span class="n">stone</span><span class="p">,</span> <span class="n">then</span> 
<span class="mi">2</span> <span class="n">units</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">4</span><span class="n">th</span> <span class="n">stone</span><span class="p">,</span> <span class="n">then</span> <span class="mi">3</span> <span class="n">units</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">6</span><span class="n">th</span> <span class="n">stone</span><span class="p">,</span> 
<span class="mi">4</span> <span class="n">units</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">7</span><span class="n">th</span> <span class="n">stone</span><span class="p">,</span> <span class="n">and</span> <span class="mi">5</span> <span class="n">units</span> <span class="n">to</span> <span class="n">the</span> <span class="mi">8</span><span class="n">th</span> <span class="n">stone</span><span class="p">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="example-2">Example 2:</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">11</span><span class="p">]</span>

<span class="n">Return</span> <span class="nb">false</span><span class="p">.</span> <span class="n">There</span> <span class="n">is</span> <span class="n">no</span> <span class="n">way</span> <span class="n">to</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">the</span> <span class="n">last</span> <span class="n">stone</span> <span class="n">as</span> 
<span class="n">the</span> <span class="n">gap</span> <span class="n">between</span> <span class="n">the</span> <span class="mi">5</span><span class="n">th</span> <span class="n">and</span> <span class="mi">6</span><span class="n">th</span> <span class="n">stone</span> <span class="n">is</span> <span class="n">too</span> <span class="n">large</span><span class="p">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="解法">解法</h1>
<h2 id="解法-1">解法 1</h2>
<p>青蛙过河，假设上次跳了k距离，这次只能跳k-1, k和k+1距离，问能否过河。<br />
首先想的是动态规划解法，对每个石头，遍历青蛙它前面的石头时跳的距离，观察这个距离能否达到（-1，+1，+0）当前石头。
如果能够达到，把当前跳的距离存入当前位置动态数组，所以首先想的是用二维动态数组存储之前跳的距离。<br />
dp[i]为vector<int>表示达到第i块石头是跳的距离。解法如下：</int></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre>    <span class="kt">bool</span> <span class="nf">canCross</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">stones</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">stones</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">j</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">back</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
                            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
                                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
                        <span class="p">}</span>

                        <span class="k">if</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
                            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]);</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
                                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
                        <span class="p">}</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
                            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
                                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
                        <span class="p">}</span>					
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">sort</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">begin</span><span class="p">(),</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">end</span><span class="p">());</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>     
    <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>但这个解法超时了，因为对每个位置存距离是vector<int>，有许多重复值，而集合可以去除重复值，所以考虑用vector&lt;int, set<int>&gt;表示动态数组，dp[i]为有序集合，根据末尾还能判断当前石头能否到达所选位置，很方便。</int></int></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kt">bool</span> <span class="nf">canCross</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">stones</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">stones</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">set</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
	<span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">rbegin</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
				<span class="k">for</span> <span class="p">(</span><span class="n">set</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
						<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
					<span class="p">}</span>

					<span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">+</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
						<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">);</span>
					<span class="p">}</span>
					<span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
						<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
					<span class="p">}</span>										
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">dp</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">empty</span><span class="p">())</span>
		<span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>runtime: 15.69% <br />
memory usage: 30.00%</p>

<h2 id="解法-2">解法 2</h2>
<p>解法1动态规划存在许多次重复插入，这里用dp[i]表示青蛙达到位置i石头时的跳跃能力，超越跳跃能力就需往后遍历。
用哈希表unordered_map&lt;int, unordered_set<int>&gt;存储到达位置i时的所有跳跃距离，还是用集合去重。</int></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kt">bool</span> <span class="nf">canCross3</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">stones</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
	<span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
	<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">stones</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">while</span> <span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">stones</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
			<span class="o">++</span><span class="n">k</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">int</span> <span class="n">dis</span> <span class="o">=</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">stones</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">count</span><span class="p">(</span><span class="n">dis</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="n">m</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">count</span><span class="p">(</span><span class="n">dis</span><span class="p">)</span> <span class="o">||</span> <span class="n">m</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">count</span><span class="p">(</span><span class="n">dis</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)){</span>
				<span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">dis</span><span class="p">);</span>
				<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">dis</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">dp</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>runtime:  65.48%<br />
memory usage: 15.00%</p>

<h2 id="解法-3">解法 3</h2>
<p>动态规划带记忆数组的递归写法。用哈希表存储每个位置和跳跃距离的状态，考虑用{pos, jump}当作键，但vector<int>是不可哈希的，所以要想
办法把pos,jump合二为一。这里``key = pos | jump &lt;&lt; 11``。</int></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kt">bool</span> <span class="nf">helper</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">stones</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">jump</span><span class="p">,</span> <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">m</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&gt;=</span> <span class="n">stones</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
		<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">|</span> <span class="p">(</span><span class="n">jump</span> <span class="o">&lt;&lt;</span> <span class="mi">11</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
		<span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">stones</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">stones</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">stones</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">jump</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">jump</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="n">distance</span><span class="p">)</span>
			<span class="k">continue</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">helper</span><span class="p">(</span><span class="n">stones</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">distance</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>
			<span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">canCross2</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">stones</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">bool</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">helper</span><span class="p">(</span><span class="n">stones</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>runtime: 83.14%<br />
memory usage: 50.00%</p>

<h1 id="link">Link</h1>
<p><a href="https://leetcode.com/problems/frog-jump/">leetcode-403</a><br />
<a href="https://www.cnblogs.com/grandyang/p/5888439.html">solution 2, 3</a></p>
:ET