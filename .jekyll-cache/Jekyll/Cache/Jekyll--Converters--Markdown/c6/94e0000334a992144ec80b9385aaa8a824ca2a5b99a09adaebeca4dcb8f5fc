I"G)<h1 id="问题描述">问题描述</h1>
<p>Given a list of words, each word consists of English lowercase letters.</p>

<p>Let’s say <code class="highlighter-rouge">word1</code> is a predecessor of <code class="highlighter-rouge">word2</code> if and only if we can add exactly one letter anywhere in <code class="highlighter-rouge">word1</code> to make it equal to <code class="highlighter-rouge">word2</code>.  For example, <code class="highlighter-rouge">"abc"</code> is a predecessor of <code class="highlighter-rouge">"abac"</code>.</p>

<p>A word chain is a sequence of words [<code class="highlighter-rouge">word_1, word_2, ..., word_k</code>] with <code class="highlighter-rouge">k &gt;= 1</code>, where <code class="highlighter-rouge">word_1</code> is a predecessor of <code class="highlighter-rouge">word_2</code>, <code class="highlighter-rouge">word_2</code> is a predecessor of <code class="highlighter-rouge">word_3</code>, and so on.</p>

<p>Return the longest possible length of a word chain with words chosen from the given list of <code class="highlighter-rouge">words</code>.</p>

<h3 id="example-1">Example 1:</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nl">Input:</span> <span class="p">[</span><span class="s">"a"</span><span class="p">,</span><span class="s">"b"</span><span class="p">,</span><span class="s">"ba"</span><span class="p">,</span><span class="s">"bca"</span><span class="p">,</span><span class="s">"bda"</span><span class="p">,</span><span class="s">"bdca"</span><span class="p">]</span>
<span class="n">Output</span><span class="o">:</span> <span class="mi">4</span>
<span class="n">Explanation</span><span class="o">:</span> <span class="n">one</span> <span class="n">of</span> <span class="n">the</span> <span class="n">longest</span> <span class="n">word</span> <span class="n">chain</span> <span class="n">is</span> <span class="s">"a"</span><span class="p">,</span><span class="s">"ba"</span><span class="p">,</span><span class="s">"bda"</span><span class="p">,</span><span class="s">"bdca"</span><span class="p">.</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="note">Note:</h3>
<ol>
  <li><code class="highlighter-rouge">1 &lt;= words.length &lt;= 1000</code></li>
  <li><code class="highlighter-rouge">1 &lt;= words[i].length &lt;= 16</code></li>
  <li><code class="highlighter-rouge">words[i]</code> only consists of English lowercase letters.</li>
</ol>

<h1 id="解法">解法</h1>
<p> 题目给出一些字符串，要找出其中最长的字符串链条，两个字符串可以链接的意思是后一个字符串比前一个字符串多一个字符，其余字符的相对位置均相同。<br />
 用动态规划来解，动态数组dp[i]表示包括i位置字符串的最长的链长度。状态转移方程也挺常规，从i往前遍历，如果words[i]比words[j]长1，则可以进行比较步骤，比较成功则可以链起来，链起来的话dp[i] = max(dp[i], dp[j] + 1)；如果长度不是相差1，则直接继续往前。<br />
 那么当两个字符串长度相差1时，如何判断它们可以链接。从末尾同时往前遍历，如果到某个位置words[i][t1] != words[j][t2], t1减1，向前调整1个位置，再继续往前，一直到开头所有位置字符都相等才能算可以链接。<br />
 因为dp[i]表示包括i位置字符串的最长的链长度，所以res应该在i位置更新完后更新一次， res=max(res, dp[i])。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="nf">longestStrChain</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">words</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">words</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="n">sort</span><span class="p">(</span><span class="n">words</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">words</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[](</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s1</span><span class="p">,</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s2</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">s1</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">s2</span><span class="p">.</span><span class="n">length</span><span class="p">();});</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="n">words</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">length</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
				<span class="k">continue</span><span class="p">;</span>
			<span class="n">string</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
			<span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">t1</span> <span class="o">=</span> <span class="n">s1</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">t2</span> <span class="o">=</span> <span class="n">s2</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
			<span class="k">while</span> <span class="p">(</span><span class="n">t1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">t2</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">s1</span><span class="p">[</span><span class="n">t1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s2</span><span class="p">[</span><span class="n">t2</span><span class="p">]){</span>
				<span class="o">--</span><span class="n">t1</span><span class="p">;</span>
				<span class="o">--</span><span class="n">t2</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="o">--</span><span class="n">t1</span><span class="p">;</span>
			<span class="k">while</span> <span class="p">(</span><span class="n">t1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">s1</span><span class="p">[</span><span class="n">t1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s2</span><span class="p">[</span><span class="n">t2</span><span class="p">]){</span>
				<span class="o">--</span><span class="n">t1</span><span class="p">;</span>
				<span class="o">--</span><span class="n">t2</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">t1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
				<span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="n">res</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>time complexity: O(n^2)<br />
space complexity: O(n)<br />
runtime: 79.76%<br />
memory usage: 100.00%</p>

<h1 id="link">Link</h1>
<p><a href="https://leetcode.com/problems/longest-string-chain/">leetcode-1048</a></p>
:ET